{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/selectors.js","redux/contacts/actions.js","redux/contacts/operations.js","components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/reducer.js","redux/store.js","index.js","components/Form/Form.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","onChangeFilter","axios","defaults","baseURL","fetchContacts","createAsyncThunk","a","get","data","console","log","addContact","number","id","uuidv4","post","deleteContact","delete","Form","prodIdName","prodIdNumber","useState","setName","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","resetForm","className","styles","form","onSubmit","preventDefault","find","alert","label","htmlFor","input","type","pattern","title","required","onChange","button","ContactList","useEffect","section","list","map","item","onClick","onDeleteContact","Filter","event","actions","App","createReducer","fulfilled","_","payload","loading","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.550ecbc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1jn1-\",\"label\":\"Filter_label__sBaUj\"};","/*Redux*/\r\n/* export const getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n}; */\r\n\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\n/* export const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n}; */\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nconst fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nconst fetchContactError = createAction('contact/fetchContactError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contact/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contact/deleteContactError');\r\n\r\n/* const onDeleteContact = createAction('contacts/delete'); */\r\n\r\nconst onChangeFilter = createAction('contacts/changeFilter');\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  deleteContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  fetchContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  /* onAddContact, */\r\n  /* onDeleteContact */\r\n  onChangeFilter,\r\n};\r\n\r\n/* export const onAddContact = createAsyncThunk(\r\n  'contacts/onAddContacts',\r\n  async contactData => {\r\n    const contact = { contactData };\r\n    const { data } = await axios.post('/contacts', contact);\r\n    console.log(data);\r\n    return data;\r\n  },\r\n); */\r\n\r\n/* const fetchContacts = createAsyncThunk('contacts/fetchContacts', async () => {\r\n  const { data } = await axios.get('/contacts');\r\n  console.log(data);\r\n  return data;\r\n}); */\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport axios from 'axios';\r\nimport actions from './actions';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\naxios.defaults.baseURL = 'https://61964677af46280017e7df47.mockapi.io';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async () => {\r\n    const { data } = await axios.get('/contacts');\r\n    console.log(data);\r\n    return data;\r\n  },\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async (name, number) => {\r\n    const contact = { name, number, id: uuidv4() };\r\n    const { data } = await axios.post('/contacts', contact);\r\n    console.log(data);\r\n    return data;\r\n  },\r\n);\r\n\r\n/* const onAddContact = (name, number) => dispatch => {\r\n  const contact = { name, number, id: uuidv4() };\r\n\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n}; */\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async id => {\r\n    const { data } = await axios.delete(`/contacts/${id}`);\r\n    console.log(data);\r\n    return data;\r\n  },\r\n);\r\n\r\n/* const onDeleteContact = contactId => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n}; */\r\n\r\n/* export default { onDeleteContact }; */\r\n\r\n/* export const fetchBooks = createAsyncThunk(\r\n  'books/fetchBooks',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const books = await bookShelfAPI.fetchBooks();\r\n      return books;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  },\r\n); */\r\n","import { useState } from 'react';\nimport { /* connect, */ useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from '../Form/Form.module.css';\nimport operations from '../../redux/contacts/operations';\nimport { addContact } from '../../redux/contacts/operations';\n\nexport default function Form(/* { onAddContact } */) {\n  const prodIdName = uuidv4();\n  const prodIdNumber = uuidv4();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    /*Before Redux*/\n    /* const contacts = {\n      name,\n      number,\n      id: uuidv4(),\n    };*/\n\n    /* console.log(contacts); */\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n    } else dispatch(addContact(name, number));\n\n    /* onAddContact(name, number); */\n    resetForm();\n  };\n\n  //очистка формы\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label} htmlFor={prodIdName}>\n        Name\n      </label>\n      <input\n        className={styles.input}\n        id={prodIdName}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleChange}\n      />\n      <br />\n      <label className={styles.label} htmlFor={prodIdNumber}>\n        Number\n      </label>\n      <input\n        className={styles.input}\n        id={prodIdNumber}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleChange}\n      />\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onAddContact: PropTypes.func,\n  number: PropTypes.number,\n  name: PropTypes.string,\n};\n\n/*Redux*/\n/* const mapDispatchToProps = dispatch => {\n  return {\n    onAddContact: (name, number) =>\n      dispatch(actions.onAddContact(name, number)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Form); */\n","import React from 'react';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../ContactList/ContactList.module.css';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport operations, { onAddContact } from '../../redux/contacts/operations';\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactList = (/* {\n    contacts,\n    onDeleteContact\n  } */) => {\n  const contacts = useSelector(getVisibleContacts);\n  console.log(contacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return (\n    <div className={styles.section}>\n      <ul className={styles.list}>\n        {contacts.map(\n          ({ id, name, number }) =>\n            typeof number === 'string' && (\n              <li className={styles.item} key={id}>\n                <p className={styles.name}> {name}:</p>\n                <p className={styles.number}>{number}</p>\n                <button\n                  className={styles.button}\n                  type=\"button\"\n                  onClick={() => onDeleteContact(id)}\n                >\n                  Delete\n                </button>\n              </li>\n            ),\n        )}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.any.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\n/*Redux*/\n/* const mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n}); */\n\n/* const mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(actions.onDeleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList); */\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../Filter/Filter.module.css';\nimport { /* connect, */ useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport actions from '../../redux/contacts/actions';\n\nconst Filter = (/* { contacts, onChange } */) => {\n  const contacts = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <label className={styles.label}>\n        Find contacts by name\n        <input\n          className={styles.input}\n          type=\"text\"\n          value={contacts}\n          onChange={event =>\n            dispatch(actions.onChangeFilter(event.target.value))\n          }\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  contacts: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n\n/*Redux*/\n/* const mapStateToProps = state => ({\n  contacts: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event => dispatch(actions.onChangeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter); */\n","/* import React, { useState, useEffect } from 'react'; */\nimport Form from './components/Form/Form';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nfunction App() {\n  //before Redux\n\n  /* const allContacts = [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]; */\n\n  /*  const useLocalStorage = allContacts => {\n    const [contacts, setContacts] = useState(\n      () => JSON.parse(window.localStorage.getItem('contacts')) ?? allContacts,\n    );\n    useEffect(() => {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts]);\n    return [contacts, setContacts];\n  }; */\n\n  /* const [contacts, setContacts] = useLocalStorage(allContacts);\n  const [filter, setFilter] = useState(''); */\n\n  /* const onAddContact = obj => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === obj.name.toLowerCase(),\n      )\n    ) {\n      alert(`${obj.name} is already in contacts`);\n    } else setContacts(prevState => [obj, ...prevState]);\n  }; */\n\n  /* const onDeleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  }; */\n\n  /* const onChangeFilter = e => {\n    setFilter(e.currentTarget.value);\n  }; */\n\n  /* const normalizedFilter = filter.toLowerCase();\n  const visibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  }; */\n\n  return (\n    <section>\n      <h2>Phonebook</h2>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </section>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './actions';\r\nimport { fetchContacts, addContact, deleteContact } from './operations';\r\nimport operations from './operations';\r\n\r\nconst {\r\n  addContactSuccess,\r\n  addContactError,\r\n  addContactRequest,\r\n  onChangeFilter,\r\n  deleteContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  fetchContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n} = actions;\r\n\r\n/* const items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, action) => action.payload,\r\n}); */\r\n\r\n/* const items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, action) => action.payload,\r\n}); */\r\n\r\nconst items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n  [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\r\n  [deleteContact.fulfilled]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [onChangeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  /* persistStore, */\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n/* import storage from 'redux-persist/lib/storage'; // defaults to localStorage for web */\r\n/* import logger from 'redux-logger'; */\r\nimport contactsReducer from './contacts/reducer';\r\n\r\n/*Redux Toolkit*/\r\n/* console.log(process.env); */\r\n/* console.log(getDefaultMiddleware()); */\r\n\r\n/* const contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}; */\r\n\r\n/* const myMiddleware = store => next => action => {\r\n  console.log('my middlewar!');\r\n}; */\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n\r\n  /* logger, */\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n/* const persistor = persistStore(store); */\r\n\r\n/*Redux*/\r\n/* import { createStore, combineReducers } from 'redux'; */\r\n/* import { composeWithDevTools } from 'redux-devtools-extension'; */\r\n\r\n/* const rootReducer = combineReducers({ contacts: contactsReducer }); */\r\n/* const store = createStore(rootReducer, composeWithDevTools()); */\r\n\r\n// eslint-disable-next-line\r\nexport default { store /* persistor */ };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n/* import { PersistGate } from 'redux-persist/integration/react'; */\nimport { Provider } from 'react-redux';\n\n/* console.log(store);\nconsole.log(store.getState()); */\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      {/* <PersistGate loading={'loading...'} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1l6z3\",\"input\":\"Form_input__1I6UD\",\"label\":\"Form_label__3TPV2\",\"button\":\"Form_button__1aedP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3-u0x\",\"item\":\"ContactList_item__AuaCI\",\"name\":\"ContactList_name__2QUM-\",\"number\":\"ContactList_number__ONKND\",\"button\":\"ContactList_button__2Y2eX\"};"],"sourceRoot":""}