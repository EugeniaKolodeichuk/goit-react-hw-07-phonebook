{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/selectors.js","redux/contacts/operations.js","components/Form/Form.js","components/ContactList/ContactList.js","redux/contacts/actions.js","components/Filter/Filter.js","App.js","redux/contacts/reducer.js","redux/store.js","index.js","components/Form/Form.module.css"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","data","message","addContact","post","deleteContact","contactId","delete","id","Form","prodIdName","uuidv4","prodIdNumber","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","resetForm","className","styles","form","onSubmit","preventDefault","find","toast","error","success","label","htmlFor","input","type","pattern","title","required","onChange","button","ContactList","useEffect","section","list","map","item","onClick","onDeleteContact","onChangeFilter","createAction","Filter","event","App","autoClose","createReducer","fulfilled","payload","loading","pending","rejected","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,KAAO,0BAA0B,OAAS,4BAA4B,OAAS,8B,mBCAnKD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,MAAQ,wB,gICC3CC,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAEtCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QAEpCC,EAAqBC,YAChC,CAACP,EAAaI,IACd,SAACF,EAAUG,GACT,IAAMG,EAAmBH,EAAOI,cAChC,OAAOP,EAASG,QAAO,SAAAK,GAAO,OAC5BA,EAAQC,KAAKF,cAAcG,SAASJ,S,wECR1CK,IAAMC,SAASC,QAAU,8CAElB,IAAMC,EAAgBC,YAC3B,yBAD2C,uCAE3C,WAAOC,EAAP,sBAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAZ,kBAE2BP,IAAMQ,IAAI,aAFrC,uBAEYC,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,yDAKWF,EAAgB,KAAMG,UALjC,yDAF2C,yDAYhCC,EAAaP,YACxB,sBADwC,uCAExC,WAAOP,EAAP,sBAAAS,EAAA,6DAAkBC,EAAlB,EAAkBA,gBAAlB,kBAE2BP,IAAMY,KAAK,YAAaf,GAFnD,uBAEYY,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,yDAKWF,EAAgB,KAAMG,UALjC,yDAFwC,yDAY7BG,EAAgBT,YAC3B,yBAD2C,uCAE3C,WAAOU,EAAP,sBAAAR,EAAA,6DAAoBC,EAApB,EAAoBA,gBAApB,kBAIcP,IAAMe,OAAN,oBAA0BD,IAJxC,uBAGcE,EAHd,EAGMP,KAAQO,GAHd,kBAKWA,GALX,yDAOWT,EAAgB,KAAMG,UAPjC,yDAF2C,yD,cCrB9B,SAASO,IACtB,IAAMC,EAAaC,cACbC,EAAeD,cAErB,EAAwBE,mBAAS,IAAjC,mBAAOvB,EAAP,KAAawB,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KAEMC,EAAWC,cACXrC,EAAWsC,YAAYxC,GAEvByC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBhC,EAAR,EAAQA,KAAMiC,EAAd,EAAcA,MACd,OAAQjC,GACN,IAAK,OACHwB,EAAQS,GACR,MACF,IAAK,SACHP,EAAUO,KAuBVC,EAAY,WAChBV,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAMS,UAAWC,IAAOC,KAAMC,SAvBX,SAAAP,GACnBA,EAAEQ,iBAGAhD,EAASiD,MACP,SAAAzC,GAAO,OAAIA,EAAQC,KAAKF,gBAAkBE,EAAKF,iBAGjD2C,IAAMC,MAAN,UAAe1C,EAAf,kCAEA2B,EAASd,EAAW,CAAEb,OAAMyB,YAC5BgB,IAAME,QAAQ,yCAEhBT,KAUA,UACE,uBAAOC,UAAWC,IAAOQ,MAAOC,QAASzB,EAAzC,kBAGA,uBACEe,UAAWC,IAAOU,MAClB5B,GAAIE,EACJ2B,KAAK,OACL/C,KAAK,OACLiC,MAAOjC,EACPgD,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUrB,IAEZ,uBACA,uBAAOK,UAAWC,IAAOQ,MAAOC,QAASvB,EAAzC,oBAGA,uBACEa,UAAWC,IAAOU,MAClB5B,GAAII,EACJyB,KAAK,MACL/C,KAAK,SACLiC,MAAOR,EACPuB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUrB,IAEZ,wBAAQK,UAAWC,IAAOgB,OAAQL,KAAK,SAAvC,4B,qBC3BSM,EA9CK,WAClB,IAAM9D,EAAWsC,YAAYlC,GAEvBgC,EAAWC,cAEjB0B,qBAAU,kBAAM3B,EAAStB,OAAkB,CAACsB,IAO5C,OACE,qBAAKQ,UAAWC,IAAOmB,QAAvB,SACE,oBAAIpB,UAAWC,IAAOoB,KAAtB,SACGjE,EAASkE,KACR,gBAAGvC,EAAH,EAAGA,GAAIlB,EAAP,EAAOA,KAAMyB,EAAb,EAAaA,OAAb,MACoB,kBAAXA,GACL,qBAAIU,UAAWC,IAAOsB,KAAtB,UACE,oBAAGvB,UAAWC,IAAOpC,KAArB,cAA6BA,EAA7B,OACA,mBAAGmC,UAAWC,IAAOX,OAArB,SAA8BA,IAC9B,wBACEU,UAAWC,IAAOgB,OAClBL,KAAK,SACLY,QAAS,kBAjBD,SAAAzC,GACtBS,EAASZ,EAAcG,IACvBuB,IAAME,QAAQ,oCAeeiB,CAAgB1C,IAHjC,sBAH+BA,W,iBC3BlC2C,EAAiBC,YAAa,yBC8B5BC,EAxBA,WACb,IAAMxE,EAAWsC,YAAYpC,GACvBkC,EAAWC,cAEjB,OACE,8BACE,wBAAOO,UAAWC,IAAOQ,MAAzB,kCAEE,uBACET,UAAWC,IAAOU,MAClBC,KAAK,OACLd,MAAO1C,EACP4D,SAAU,SAAAa,GAAK,OAAIrC,EAASkC,EAAeG,EAAMhC,OAAOC,iB,MCDnDgC,I,IAAAA,EAbf,WACE,OACE,oCACE,2CACA,cAAC9C,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,IAAD,CAAgB+C,UAAW,U,8BCT3B1E,EAAQ2E,YAAc,IAAD,mBACxB9D,EAAc+D,WAAY,SAAC7D,EAAD,YAAM8D,WADR,cAExBxD,EAAWuD,WAAY,SAAC9E,EAAD,YAAU+E,SAAV,mBAAqC/E,OAFpC,cAGxByB,EAAcqD,WAAY,SAAC9E,EAAD,OAAU+E,EAAV,EAAUA,QAAV,OACzB/E,EAAMI,QAAO,SAAAK,GAAO,OAAIA,EAAQmB,KAAOmD,QAJhB,IAOrBC,EAAUH,aAAc,GAAD,mBAC1BtD,EAAW0D,SAAU,kBAAM,KADD,cAE1B1D,EAAWuD,WAAY,kBAAM,KAFH,cAG1BvD,EAAW2D,UAAW,kBAAM,KAHF,cAI1BzD,EAAcwD,SAAU,kBAAM,KAJJ,cAK1BxD,EAAcqD,WAAY,kBAAM,KALN,cAM1BrD,EAAcyD,UAAW,kBAAM,KANL,cAO1BnE,EAAckE,SAAU,kBAAM,KAPJ,cAQ1BlE,EAAc+D,WAAY,kBAAM,KARN,cAS1B/D,EAAcmE,UAAW,kBAAM,KATL,IAYvB9E,EAASyE,YAAc,GAAD,eACzBN,GAAiB,SAACtD,EAAGkE,GAAJ,OAAeA,EAAOJ,YAG3BK,cAAgB,CAAElF,QAAOE,SAAQ4E,YCf1CK,EAAU,YACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAcjD,GAAEC,MATHC,YAAe,CAC3BC,QAAS,CACPhG,SAAUiG,GAEZb,aACAc,UAAUC,KCnBZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAMA,MAAvB,SACE,cAAC,EAAD,QAGJS,SAASC,eAAe,U,kBCZ1B5G,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,MAAQ,oBAAoB,OAAS,wB","file":"static/js/main.c6fa5260.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3-u0x\",\"item\":\"ContactList_item__AuaCI\",\"name\":\"ContactList_name__2QUM-\",\"number\":\"ContactList_number__ONKND\",\"button\":\"ContactList_button__2Y2eX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1jn1-\",\"label\":\"Filter_label__sBaUj\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\naxios.defaults.baseURL = 'https://61964677af46280017e7df47.mockapi.io';\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const { data } = await axios.get('/contacts');\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  },\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async (contact, { rejectWithValue }) => {\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  },\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (contactId, { rejectWithValue }) => {\r\n    try {\r\n      const {\r\n        data: { id },\r\n      } = await axios.delete(`/contacts/${contactId}`);\r\n      return id;\r\n    } catch (error) {\r\n      return rejectWithValue(error.message);\r\n    }\r\n  },\r\n);\r\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport styles from '../Form/Form.module.css';\nimport { addContact } from '../../redux/contacts/operations';\nimport { toast } from 'react-toastify';\nexport default function Form() {\n  const prodIdName = uuidv4();\n  const prodIdNumber = uuidv4();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      toast.error(`${name} is already in your contacts`);\n    } else {\n      dispatch(addContact({ name, number }));\n      toast.success('Сontact was added successfully!');\n    }\n    resetForm();\n  };\n\n  //очистка формы\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label} htmlFor={prodIdName}>\n        Name\n      </label>\n      <input\n        className={styles.input}\n        id={prodIdName}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleChange}\n      />\n      <br />\n      <label className={styles.label} htmlFor={prodIdNumber}>\n        Number\n      </label>\n      <input\n        className={styles.input}\n        id={prodIdNumber}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleChange}\n      />\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  onAddContact: PropTypes.func,\n  number: PropTypes.number,\n  name: PropTypes.string,\n};\n","import React from 'react';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../ContactList/ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { toast } from 'react-toastify';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n    toast.success('Contact was deleted successfully');\n  };\n\n  return (\n    <div className={styles.section}>\n      <ul className={styles.list}>\n        {contacts.map(\n          ({ id, name, number }) =>\n            typeof number === 'string' && (\n              <li className={styles.item} key={id}>\n                <p className={styles.name}> {name}:</p>\n                <p className={styles.number}>{number}</p>\n                <button\n                  className={styles.button}\n                  type=\"button\"\n                  onClick={() => onDeleteContact(id)}\n                >\n                  Delete\n                </button>\n              </li>\n            ),\n        )}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.any.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const onChangeFilter = createAction('contacts/changeFilter');\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../Filter/Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/selectors';\n\nimport { onChangeFilter } from '../../redux/contacts/actions';\n\nconst Filter = () => {\n  const contacts = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <label className={styles.label}>\n        Find contacts by name\n        <input\n          className={styles.input}\n          type=\"text\"\n          value={contacts}\n          onChange={event => dispatch(onChangeFilter(event.target.value))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  contacts: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import Form from './components/Form/Form';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n    <section>\n      <h2>Phonebook</h2>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <ToastContainer autoClose={2000} />\n    </section>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { fetchContacts, addContact, deleteContact } from './operations';\r\nimport { onChangeFilter } from './actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\r\n  [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\r\n  [deleteContact.fulfilled]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n  [deleteContact.pending]: () => true,\r\n  [deleteContact.fulfilled]: () => false,\r\n  [deleteContact.rejected]: () => false,\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [onChangeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nimport contactsReducer from './contacts/reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// eslint-disable-next-line\r\nexport default { store };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1l6z3\",\"input\":\"Form_input__1I6UD\",\"label\":\"Form_label__3TPV2\",\"button\":\"Form_button__1aedP\"};"],"sourceRoot":""}